{"version":3,"sources":["logo.svg","redux-state/cice-actions.js","redux-state/cice-second-actions.js","components/saludo/Saludo.js","components/ajax-component/AjaxComponent.js","App.js","serviceWorker.js","redux-state/cice-reducer.js","redux-state/cice-second-reducer.js","redux-state/cice-store.js","index.js"],"names":["module","exports","__webpack_require__","p","SUMA","RESTA","SALUDO","DESPIDE","connection","connect","store","clicks","cice","counter","texto","comunicacion","message","dispatch","onSuma","amount","type","payload","actionSuma","onResta","actionResta","onSaluda","onDespide","onWaste","console","log","props","react_default","a","createElement","onClick","AjaxComponent","state","users","className","styles","marius","this","map","user","index","key","concat","name","React","Component","App","saludo_Saludo","ajax_component_AjaxComponent","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","initialState","other","ciceReducer","prevState","arguments","length","undefined","action","Object","objectSpread","secondReducer","reducers","combineReducers","middlewares","applyMiddleware","logger","composeEnhancers","composeWithDevTools","createStore","ReactDOM","render","es","customStore","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.52758349.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","export const SUMA = \"SUMA\";\r\nexport const actionSuma = (amount) => ({\r\n    type: SUMA,\r\n    payload: {\r\n        amount\r\n    }\r\n});\r\n\r\nexport const RESTA = \"RESTA\";\r\nexport const actionResta = (amount) => ({\r\n    type: RESTA,\r\n    payload: {\r\n        amount\r\n    }\r\n});\r\n","export const SALUDO = \"SALUDO\";\r\nexport const sayHello = () => ({\r\n    type:SALUDO\r\n});\r\n\r\nexport const DESPIDE = \"DESPIDE\";\r\nexport const sayBye = () => ({\r\n    type:DESPIDE\r\n});","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { actionSuma, actionResta } from \"../../redux-state/cice-actions\";\r\nimport { sayHello, sayBye } from \"../../redux-state/cice-second-actions\";\r\n\r\nconst Saludo = (props) => (\r\n    <div>\r\n        <p>{props.texto} Clase. Hemos pulsado {props.clicks} veces</p>\r\n\r\n        <button onClick={() => { props.onSuma(1) }}>Suma</button>\r\n        <button onClick={() => { props.onResta(1) }}>Resta</button>\r\n        <button onClick={() => { props.onSaluda() }}>Saluda</button>\r\n        <button onClick={() => { props.onDespide() }}>Despide</button>\r\n        <button onClick={() => { props.onWaste() }}>Waste</button>\r\n    </div>\r\n);\r\n\r\nconst mapStateToProps = (store) => ({\r\n    clicks: store.cice.counter,\r\n    texto: store.comunicacion.message\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    onSuma: amount => { dispatch(actionSuma(amount)) },\r\n    onResta: amount => { dispatch(actionResta(amount)) },\r\n    // Cuando llame a props.onSaluda\r\n    // -> uso el dispatch() que recibe un obj\r\n    // --> que viene del creator que ejecuto\r\n    onSaluda: () => { dispatch(sayHello()) },\r\n    onDespide: () => { dispatch(sayBye()) },\r\n    // Puedo ejecutar callbacks que no usen el store, pero para quÃ©...\r\n    onWaste: () => console.log(\"Perdiendo tiempo\")\r\n});\r\n\r\n// 1. La func que devuelve el obj de props a inyectar,\r\n// 2. La func que devuelve el obj con props tipo \"callback\" \r\n//  para ejecutar acciones CON EL DISPATCH\r\nconst connection = connect(mapStateToProps, mapDispatchToProps); // ()\r\n\r\nexport default connection(Saludo); // Devuelvo el componente conectado a Redux\r\n","import React from \"react\";\r\nimport styles from \"./style.css\";\r\n\r\nclass AjaxComponent extends React.Component {\r\n  state = {\r\n    users: []\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.marius}>\r\n        <p>Lista de usuarios: </p>\r\n        <ul>\r\n          {this.state.users &&\r\n            this.state.users.map((user, index) => (\r\n              <li key={`user_${index}`}>Usuario: {user.name}</li>\r\n            ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default AjaxComponent;\r\n","import React, { Component } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./App.css\";\nimport Saludo from \"./components/saludo/Saludo\";\nimport AjaxComponent from \"./components/ajax-component/AjaxComponent\";\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Saludo />\n        <div styles=\"background: #444; color: #fafafa;\">\n          <AjaxComponent />\n        </div>\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>\n            Edit <code>src/App.js</code> and save to reload.\n          </p>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Learn React\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { SUMA, RESTA } from \"./cice-actions\";\r\n\r\nconst initialState = {\r\n    counter: 3,\r\n    other: null\r\n};\r\n\r\nfunction ciceReducer(prevState = initialState, action) {\r\n    switch(action.type) {\r\n        case SUMA:\r\n            return {\r\n                ...prevState,\r\n                counter: prevState.counter + action.payload.amount\r\n            };\r\n        case RESTA:\r\n            return {\r\n                ...prevState,\r\n                counter: prevState.counter - action.payload.amount\r\n            };\r\n        default:\r\n            return prevState;\r\n    }\r\n}\r\n\r\nexport default ciceReducer;","import { SALUDO, DESPIDE } from \"./cice-second-actions\";\r\n\r\nconst initialState = {\r\n    message: \"(inicio)\"\r\n};\r\n\r\nfunction secondReducer(prevState = initialState, action) {\r\n    switch(action.type) {\r\n        case SALUDO:\r\n            return {\r\n                ...prevState,\r\n                message: \"Hola\"\r\n            }\r\n        case DESPIDE:\r\n            return {\r\n                ...prevState,\r\n                message: \"AdiÃ³s\"\r\n            }\r\n        default:\r\n            return prevState;\r\n    }\r\n}\r\n\r\nexport default secondReducer;","import { createStore, combineReducers, applyMiddleware } from \"redux\";\r\nimport ciceReducer from \"./cice-reducer\";\r\nimport secondReducer from \"./cice-second-reducer\";\r\nimport logger from \"redux-logger\";\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\n\r\nconst reducers = combineReducers({\r\n    cice: ciceReducer,\r\n    comunicacion: secondReducer\r\n});\r\nconst middlewares = applyMiddleware(logger);\r\n// Inyectamos en Window una constante para poder conectar al DevTools\r\nconst composeEnhancers = composeWithDevTools(middlewares);\r\n\r\nexport default createStore(reducers, composeEnhancers);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from \"react-redux\";\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport customStore from \"./redux-state/cice-store\";\n\nconst MainApp = () => (\n    <Provider store={customStore}>\n        <App />\n    </Provider>\n);\n\nReactDOM.render(<MainApp />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}